//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputActions/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Scenario"",
            ""id"": ""d4b2ac84-b644-4064-8d86-050b751b881f"",
            ""actions"": [
                {
                    ""name"": ""RotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""c2f03923-e791-4d0b-b180-ea946d1bf920"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""1b0219aa-f100-4467-84db-99c7c2af8438"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7059980c-ae9c-46b3-a179-f7373ceed352"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""404814e6-ac63-40a6-885a-89b79bcbbf69"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cefcf41e-6f2d-46e4-9a7a-5d2552e0669c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""391b0f02-8f93-4e7d-bee8-ba09aa31eeab"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""ea4862f0-563d-4825-a416-7239cec3e73f"",
            ""actions"": [
                {
                    ""name"": ""PanelPause"",
                    ""type"": ""Button"",
                    ""id"": ""8e5dee76-c5f7-411a-a5a9-bcfb3688278d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayAction"",
                    ""type"": ""Button"",
                    ""id"": ""9a9c08a4-50f4-44d1-b15f-4516f535af9c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExitAction"",
                    ""type"": ""Button"",
                    ""id"": ""d33b4dde-be1d-470a-bb8a-7935787a9c06"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""02be230b-8851-4d88-b09d-909d34af88bc"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PanelPause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""035e3bb2-032f-429b-ac95-4483f91a7aaa"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PanelPause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d26e7fe3-9719-4214-963d-dd0efead0c32"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d26b7ea8-556b-4f76-9976-5735d5a99d44"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Scenario
        m_Scenario = asset.FindActionMap("Scenario", throwIfNotFound: true);
        m_Scenario_RotateRight = m_Scenario.FindAction("RotateRight", throwIfNotFound: true);
        m_Scenario_RotateLeft = m_Scenario.FindAction("RotateLeft", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_PanelPause = m_UI.FindAction("PanelPause", throwIfNotFound: true);
        m_UI_PlayAction = m_UI.FindAction("PlayAction", throwIfNotFound: true);
        m_UI_ExitAction = m_UI.FindAction("ExitAction", throwIfNotFound: true);
    }

    ~@InputActions()
    {
        UnityEngine.Debug.Assert(!m_Scenario.enabled, "This will cause a leak and performance issues, InputActions.Scenario.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, InputActions.UI.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Scenario
    private readonly InputActionMap m_Scenario;
    private List<IScenarioActions> m_ScenarioActionsCallbackInterfaces = new List<IScenarioActions>();
    private readonly InputAction m_Scenario_RotateRight;
    private readonly InputAction m_Scenario_RotateLeft;
    public struct ScenarioActions
    {
        private @InputActions m_Wrapper;
        public ScenarioActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateRight => m_Wrapper.m_Scenario_RotateRight;
        public InputAction @RotateLeft => m_Wrapper.m_Scenario_RotateLeft;
        public InputActionMap Get() { return m_Wrapper.m_Scenario; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ScenarioActions set) { return set.Get(); }
        public void AddCallbacks(IScenarioActions instance)
        {
            if (instance == null || m_Wrapper.m_ScenarioActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ScenarioActionsCallbackInterfaces.Add(instance);
            @RotateRight.started += instance.OnRotateRight;
            @RotateRight.performed += instance.OnRotateRight;
            @RotateRight.canceled += instance.OnRotateRight;
            @RotateLeft.started += instance.OnRotateLeft;
            @RotateLeft.performed += instance.OnRotateLeft;
            @RotateLeft.canceled += instance.OnRotateLeft;
        }

        private void UnregisterCallbacks(IScenarioActions instance)
        {
            @RotateRight.started -= instance.OnRotateRight;
            @RotateRight.performed -= instance.OnRotateRight;
            @RotateRight.canceled -= instance.OnRotateRight;
            @RotateLeft.started -= instance.OnRotateLeft;
            @RotateLeft.performed -= instance.OnRotateLeft;
            @RotateLeft.canceled -= instance.OnRotateLeft;
        }

        public void RemoveCallbacks(IScenarioActions instance)
        {
            if (m_Wrapper.m_ScenarioActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IScenarioActions instance)
        {
            foreach (var item in m_Wrapper.m_ScenarioActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ScenarioActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ScenarioActions @Scenario => new ScenarioActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_PanelPause;
    private readonly InputAction m_UI_PlayAction;
    private readonly InputAction m_UI_ExitAction;
    public struct UIActions
    {
        private @InputActions m_Wrapper;
        public UIActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PanelPause => m_Wrapper.m_UI_PanelPause;
        public InputAction @PlayAction => m_Wrapper.m_UI_PlayAction;
        public InputAction @ExitAction => m_Wrapper.m_UI_ExitAction;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @PanelPause.started += instance.OnPanelPause;
            @PanelPause.performed += instance.OnPanelPause;
            @PanelPause.canceled += instance.OnPanelPause;
            @PlayAction.started += instance.OnPlayAction;
            @PlayAction.performed += instance.OnPlayAction;
            @PlayAction.canceled += instance.OnPlayAction;
            @ExitAction.started += instance.OnExitAction;
            @ExitAction.performed += instance.OnExitAction;
            @ExitAction.canceled += instance.OnExitAction;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @PanelPause.started -= instance.OnPanelPause;
            @PanelPause.performed -= instance.OnPanelPause;
            @PanelPause.canceled -= instance.OnPanelPause;
            @PlayAction.started -= instance.OnPlayAction;
            @PlayAction.performed -= instance.OnPlayAction;
            @PlayAction.canceled -= instance.OnPlayAction;
            @ExitAction.started -= instance.OnExitAction;
            @ExitAction.performed -= instance.OnExitAction;
            @ExitAction.canceled -= instance.OnExitAction;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IScenarioActions
    {
        void OnRotateRight(InputAction.CallbackContext context);
        void OnRotateLeft(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnPanelPause(InputAction.CallbackContext context);
        void OnPlayAction(InputAction.CallbackContext context);
        void OnExitAction(InputAction.CallbackContext context);
    }
}
